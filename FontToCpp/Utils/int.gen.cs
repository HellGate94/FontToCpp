//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool
// Runtime Version: 1.0.0.0
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace HellEngine.Mathematics;

public static unsafe partial class math {
    #region Component Math

    /// <summary>Returns the bit pattern of an int value as an uint value</summary>
    /// <param name="value">The int bits to copy</param>
    /// <returns>The uint with the same bit pattern as the input</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static uint asuint(int value) {
        return *(uint*)&value;
    }
    /// <summary>Returns the bit pattern of an int value as a float value</summary>
    /// <param name="value">The int bits to copy</param>
    /// <returns>The float with the same bit pattern as the input</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static float asfloat(int value) {
        return *(float*)&value;
    }
    /// <summary>Minimum of two int values</summary>
    /// <param name="x">The first of two values to compare</param>
    /// <param name="y">The second of two values to compare</param>
    /// <returns>Componentwise Minimum</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int min(in int x, in int y) {
        return x < y ? x : y;
    }
    /// <summary>Maximum of two int values</summary>
    /// <param name="x">The first of two values to compare</param>
    /// <param name="y">The second of two values to compare</param>
    /// <returns>Componentwise Maximum</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int max(in int x, in int y) {
        return x > y ? x : y;
    }
    /// <summary>Returns the result of clamping the value x into the interval [a, b], where x, a and b are byte values</summary>
    /// <param name="x">Input value to be clamped</param>
    /// <param name="a">Lower bound of the interval</param>
    /// <param name="b">Upper bound of the interval</param>
    /// <returns>The clamping of the input x into the interval [a, b]</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int clamp(in int x, in int a, in int b) {
        return max(a, min(b, x));
    }
    /// <summary>Returns the absolute value of an int value</summary>
    /// <param name="x">Input value</param>
    /// <returns>The absolute value of the input</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int abs(in int x) {
        return Math.Abs(x);
    }
    /// <summary>Returns the sign of an int value value. -1 if it is less than zero, 0 if it is zero and 1 if it greater than zero</summary>
    /// <param name="x">Input value</param>
    /// <returns>The sign of the input</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int sign(in int x) {
        return Math.Sign(x);
    }
    /// <summary>Returns the dot product of two int values values. Equivalent to multiplication</summary>
    /// <param name="x">The first value</param>
    /// <param name="y">The second value</param>
    /// <returns>The dot product of two values</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int dot(in int x, in int y) {
        return x * y;
    }
    /// <summary>Returns b if c is true, a otherwise</summary>
    /// <param name="a">Value to use if c is false</param>
    /// <param name="b">Value to use if c is false</param>
    /// <param name="c">Bool value to choose between a and b</param>
    /// <returns>The selection between a and b according to bool c</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static int select(in int a, in int b, in bool c) {
        return c ? b : a;
    }
    #endregion Component Math

}
